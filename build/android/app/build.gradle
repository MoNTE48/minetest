apply plugin: 'com.android.application'
android {
	compileSdkVersion 29
	buildToolsVersion "29.0.2"

	defaultConfig {
		applicationId 'net.minetest.minetest'
		minSdkVersion 16
		targetSdkVersion 29
		versionName "5.1.0"
		versionCode 24
	}

	lintOptions {
		disable "OldTargetApi", "GoogleAppIndexingWarning"
	}

	Properties props = new Properties()
	props.load(new FileInputStream(file('../local.properties')))

	if (props.getProperty('keystore') != null) {
		signingConfigs {
			release {
				storeFile file(props['keystore'])
				storePassword props['keystore.password']
				keyAlias props['key']
				keyPassword props['key.password']
			}
		}

		buildTypes {
			release {
				minifyEnabled false
				signingConfig signingConfigs.release
			}
		}
	}

	task copyAssets {
		delete 'src/main/assets'
		mkdir 'src/main/assets'

		def mtAssetsFolder = "src/main/assets/Minetest"
		def projRoot = "../../.."
		def gameToCopy = "minetest_game"

		mkdir "${mtAssetsFolder}"
		mkdir "${mtAssetsFolder}/client"
		mkdir "${mtAssetsFolder}/fonts"
		mkdir "${mtAssetsFolder}/games"
		mkdir "${mtAssetsFolder}/media"

		copy {
			from "${projRoot}/minetest.conf.example", "${projRoot}/README.md" into mtAssetsFolder
		}
		copy {
			from "${projRoot}/doc/lgpl-2.1.txt" into "${mtAssetsFolder}"
			rename ("lgpl-2.1.txt", "LICENSE.txt")
		}

		copy {
			from "${projRoot}/builtin" into "${mtAssetsFolder}/builtin"
		}
		copy {
			from "${projRoot}/client/shaders" into "${mtAssetsFolder}/client/shaders"
		}
		copy {
			from "${projRoot}/fonts" include "*.ttf" into "${mtAssetsFolder}/fonts"
		}
		copy {
			from "${projRoot}/games/${gameToCopy}" into "${mtAssetsFolder}/games/${gameToCopy}"
		}
		/*copy {
			from "${projRoot}/po" into "${mtAssetsFolder}/po"
			// locales broken right now
			// but I will be fix it later
		}*/
		copy {
			from "${projRoot}/textures" into "${mtAssetsFolder}/textures"
		}
	}


// for multiple APKs
	splits {
		abi {
			enable true
			reset()
			include 'armeabi-v7a', 'arm64-v8a'//, 'x86'
		}
	}
}

// Map for the version code that gives each ABI a value.
import com.android.build.OutputFile

def abiCodes = ['armeabi-v7a': 0, 'arm64-v8a': 1 /*, 'x86': 2*/]
android.applicationVariants.all { variant ->
	variant.outputs.each {
		output ->
			def abiName = output.getFilter(OutputFile.ABI)
			output.versionCodeOverride = abiCodes.get(abiName, 0) + variant.versionCode
	}
}

dependencies {
	// Minetest Native
	implementation project(':native')
	implementation 'androidx.legacy:legacy-support-v4:1.0.0'
}